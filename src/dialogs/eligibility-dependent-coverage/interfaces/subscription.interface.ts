import { IEligibilities } from "../models";

type MedicalType = 'Medical';

export interface IEligibility {
    coverageType?: string; // ADDED 1/06
    eligibilityStatus: string;  //Active;
    startDate: string;
    endDate: string;
    planStartDate: string;
    planEndDate: string;
    groupName: string;
    groupNumber: string;
    planCode: string;
    planCodeDescription: string;
    terminationReason: string;
    subGroupNumber: string;
    planType: string;
    planTypeDescription: string;
    memberRiders: [{
        riderType: string;
        riderCode: string;
        riderDescription: string;
        riderDocumentURI: string;
        riderEffectiveDate: string;
        riderTerminationDate: string
    }];
    coverageDescription1: string;
    pcpRequired: string;
    corpId: string;
    groupAddress: {
        addressType: string; //Member;
        addressLine1: string;
        addressLine2: string;
        city: string;
        state: string;
        zipCode: string;
        zipExtension: string
    };
    subGroupName: string;
    subGroupCategory: string;
    subGroupCategoryName: string;
    billType: string;
    eligibilityTypeCode: string;
    eligibilityTypeDescription: string;
    incentiveTypeId: string;
    incentiveTypeDescription: string;
    wellnessLevelId: string;
    wellnessLevelDescription: string;
    hixFamilyId: string;
    hixPolicyId: string;
    hixMemberId: string;
    shopEin: string;
    consumerConnectId: string;
    riders: string;
    cdhs: [{
        hasCDH: string;
        groupCode: string;
        groupName: string;
        subGroupCode: string;
        subGroupName: string;
        planCode: string;
        planDescription: string;
        employeeId: string;
        startDate: string;
        endDate: string;
        benefitType: string;
        benefitTypeDescription: string;
        hraPayor: string;
        bankName: string;
        bankingException: string;
        isPharmacyIntegrated: string;
        acsFlag: string;
        acsCustId: string;
        acsEmpId: string;
        benefitAdminId: string;
        pbsFlag: string;
        hiaFundType: string;
        healthIncentiveType: string;
        ufDedPct: 0;
        cmbioufDed: string;
        cmbifufDed: string;
        evl1Flag: string;
        benefitStatus: string;
        evolution1EmployeeCode: string;
        hasHealthyU: true;
        hasGoalsPlan: true
    }];
    otherEligibilities: [{
        hasOtherEligibility: string;
        startDate: string;
        startDate_d: 0;
        endDate: string;
        endDate_d: 0;
        benefitType: string;
        benefitTypeDescription: string;
        amountPerPay: 0;
        annualAmount: 0;
        employerContribution: 0;
        terminationReason: string
    }];
    miscellaneousStatusCode: string;
    entity: string;
    preExistingConditionFlag: string;
    preExistingConditionFromDte: 0;
    preExistingConditionThruDte: 0;
    qualifyingEvtCd: string;
    pensionAmt: 0;
    transitionEffectiveDate: 0;
    accumulatorType: string;
    outOfPocketAccumulatorType: string;
    companyCode: string;
    groupAssociationCode: string;
    groupAgePolicy: string;
    qualHealthPlanId: string;
    hixSource: string;
    coverageGroupType: string;
    deductible: string;
    mhLimits: string;
    coc: string;
    copay: {
        urgentCare: string;
        pcp: string;
        preventive: string;
        primary: string;
        obGyn: string;
        chiro: string;
        specialist: string;
        emergency: string;
        mentalHealth: string;
        majorMedical: string
    };
    displayPlanCodeDescription: string;
    coinsurance: string;
    otherBenefits: {};
    printOnIdCard: true;
    networkDescription: string;
    newbornPolicyCode: string;
    riderOverrideAmt4: 0;
    premiumOverrideAmt: 0;
    terminationDescription: string;
    partDSubsidy: string;
    partDSubsidyDescription: string;
    lowIncomeCopayLevel: string;
    lowIncomeCopayLevelDescription: string;
    withholdingType: string;
    withholdingTypeDescription: string;
    benefitLevels: [{
        benefitLevel: string
    }];
    planBenefits: [{
        benefit: string;
        benefitValue: string;
        benefitDescription: string
    }];
    hasMedical: true;
    hasAnyDental: true;
    hasAnyVision: true;
    hasDentalAdvantage: true;
    hasDentalDiscount: true;
    hasSantechDentalPediatric: true;
    hasDominionDentalPediatric: true;
    hasPediatric: true;
    hasCdh: true;
    hasValueAddedBenefits: true;
    hasNva: true;
    hasDVNva: true;
    hasVisionAdvantage: true;
    hasRx: true;
    hasVisionCare: true;
    hasHsaOnly: true;
    isMostRecent: true;
    isDigitalFirstMember: true;
    isAso: true
}

export interface ISubscription {
    coveredMembers: string;
    memberId: string;
    subscriberNumber: string;
    personNumber: string;
    associatedMemberId: string;
    associatedSubscriberNumber: string;
    associatedPersonNumber: string;
    memberMmi: string;
    personId: string;
    ssn: string;
    firstName: string;
    lastName: string;
    middleName: string;
    fullName: string;
    membersTitle: string;
    membersSuffix: string;
    dateOfBirth: string;
    gender: string;
    employeeNumber: string;
    relationshipCode: string;
    relationshipDescription: string;
    rawRelationshipCode: string;
    rawRelationshipDescription: string;
    maritalStatus: string;
    languageCode: string;
    lockInType: string;
    deptId: string;
    currentAssignedProvider1: string;
    currentAssignedProvider2: string;
    imputedProviderId: string;
    imputedOfficeId: string;
    hasReferrals: string;
    addresses: [{
        addressType: string; //Member;
        addressLine1: string;
        addressLine2: string;
        city: string;
        state: string;
        zipCode: string;
        zipExtension: string
    }];
    contact: any;
    memberStatus: string;
    dateOfBirth_d: 0;
    allowRegister: true;
    registrationAge: 0;
    hixContactPersonFirstName: string;
    hixContactPersonLastName: string;
    hixContactPhone1: string;
    offExchangeMemberId: string;
    onExchangeMemberId: string;
    statementOption: string;
    dateOfDeath: string;
    qmbFlag: true;
    countyCode: string;
    countyDescription: string;
    healthCareConcierge: string;
    eligibilities:  IEligibilities [], //  Array<IEligibility>;
    additionalMemberIds: [{
        masterMemberId: 0;
        additionalMemberId: string;
        sourceSystem: string;
    }];
    electronicOptions: [{
        electronicOptsCode: string;
        optInOutFlag: string
    }];
    membersInitial: string;
    subscriptionType: MedicalType;
    age: 0;
    relationship: {
        id: 0;
        name: string;
        code: string;
    };
    homeAddress1: string;
    homeAddress2: string;
    homeCity: string;
    homeState: string;
    homeZip: string;
    mailingAddress1: string;
    mailingAddress2: string;
    mailingCity: string;
    mailingState: string;
    mailingZip: string;
    snpMemberId: string;
    medicaidId: string;
    memberVIPSecurityCode: string;
    autoPayIndicator: true;
    idCardIssueDate: string;
    allowPcpChange: true;
    coveragePeriods: [{
        startDate: string;
        endDate: string;
    }];
    optInGeneralCommunications: true;
    optInWelcomeKitCommunications: true;
    optInEobCommunications: true;
    optInCvsDiscountProgram: true;
    optInPlanDocumentsCommunications: true;
    optInSmsCommunications: true;
    lastUpdated: string;
    hasFsa: true;
}
